<%-
  def extract_attributes(schema, properties)
    attributes = []

    _, properties = schema.dereference(properties)

    properties.each do |key, value|
      # found a reference to another element:
      ref, value = schema.dereference(value)
      ref = ref && ref.split('/')

      property_attributes = []

      if value.has_key?('anyOf')
        descriptions = []
        examples = []

        anyof = value['anyOf']

        anyof.each do |anyof_ref|
          _, nested_field = schema.dereference(anyof_ref)
          descriptions << nested_field['description'] if nested_field['description']
          examples << nested_field['example'] if nested_field['example']
        end

        # avoid repetition :}
        description = if descriptions.size > 1
          descriptions.first.gsub!(/ of (this )?.*/, "")
          descriptions[1..-1].map { |d| d.gsub!(/unique /, "") }
          [descriptions[0...-1].join(", "), descriptions.last].join(" or ")
        else
          description = descriptions.last
        end

        example = [*examples].map { |e| "`#{e.to_json}`" }.join(" or ")
        property_attributes << [key, "string", description, example]

      # found a nested object
      elsif value['properties']
        nested = extract_attributes(schema, value['properties'])
        nested.each do |attribute|
          attribute[0] = "#{key}:#{attribute[0]}"
        end
        property_attributes.concat(nested)

      elsif array_with_nested_objects?(value['items'])
        if value['items']['properties']
          nested = extract_attributes(schema, value['items']['properties'])
          nested.each do |attribute|
            attribute[0] = "#{key}/#{attribute[0]}"
          end
          property_attributes.concat(nested)
        end
        if value['items']['oneOf']
          value['items']['oneOf'].each_with_index do |oneof, index|
          oneof_ref,  oneof_definition = schema.dereference(oneof)
          oneof_name = oneof_ref ? oneof_ref.split('/').last : index
          nested = extract_attributes(schema, oneof_definition['properties'])
          nested.each do |attribute|
            attribute[0] = "#{key}/#{attribute[0]}"
            if prefix = oneof_definition['title'].presence || oneof_definition['description'].presence
              attribute[2] = "_#{prefix}:_ #{attribute[2]}"
            end
          end
          property_attributes.concat(nested)
        end
      end

      # just a regular attribute
      else
        property_attributes << build_attribute(schema, key, value, ref)
      end

      # include top level reference to nested objects with descriptions
      if value['description'].present? && (value.has_key?('properties') || (value.has_key?('items') && value['items'].has_key?('properties')))
        # A nullable object usually isn't a reference to another schema. It's
        # either not a reference at all, or it's a reference within the same
        # schema. Instead, the definition of the nullable object might contain
        # references to specific properties.
        #
        # If all properties refer to the same schema, we'll use that as the
        # reference. This might even overwrite an actual, intra-schema
        # reference.
        l = property_attributes.map { |key, type, description, example, ref| ref && ref[0..2] }
        if l.uniq.size == 1 && l[0] != nil
          ref = l[0]
        end

        attributes << build_attribute(schema, key, value, ref)
      end

      attributes.concat(property_attributes)

      if value.has_key?('type') && value['type'].include?('object') && options = value.values_at('allOf', 'anyOf', 'oneOf').compact.first
        property_keys = property_attributes.map(&:first)

        option_prefixes = []
        option_attributes = []
        options.each do |option|
          _, option = schema.dereference(option)
          option_prefixes << option['title'].presence || option['description'].presence
          option_attributes << extract_attributes(schema, option['properties'])
        end

        attribute_counts = Hash.new(0)
        option_attributes.flatten(1).each do |attribute|
          attribute[0] = "#{key}:#{attribute[0]}"
          attribute_counts[attribute] += 1
        end

        attribute_counts.each do |attribute, count|
          if count == options.size && !property_keys.include?(attribute[0])
            attributes << attribute
            property_keys << attribute[0]
          end
        end

        option_prefixes.zip(option_attributes).each do |option_prefix, option_attributes|
          option_attributes.each do |attribute|
            unless property_keys.include?(attribute[0])
              if option_prefix
                attribute[2] = "_#{option_prefix}:_ #{attribute[2]}"
              end
              attributes << attribute
            end
          end
        end
      end
    end
    attributes.map! { |key, type, description, example, ref|
      if example.nil? && Prmd::DefaultExamples.key?(type)
        example = "`%s`" % Prmd::DefaultExamples[type].to_json
      end
      [key, type, description, example, ref]
    }
    return attributes
  end

  def build_attribute(schema, key, value, ref)
    description = value['description'] || ""
    if value['default']
      description += "<br/> **default:** `#{value['default'].to_json}`"
    end

    if value['minimum'] || value['maximum']
      description += "<br/> **Range:** `"
      if value['minimum']
        comparator = value['exclusiveMinimum'] ? "<" : "<="
        description += "#{value['minimum'].to_json} #{comparator} "
      end
      description += "value"
      if value['maximum']
        comparator = value['exclusiveMaximum'] ? "<" : "<="
        description += " #{comparator} #{value['maximum'].to_json}"
      end
      description += "`"
    end

    if value['enum']
      label = if value['enum'].size == 1 && value['type'].exclude?('null')
        '**value:**'
      else
        '**one of:**'
      end
      description += '<br/> ' + label + ' ' + [*value['enum']].map { |e| "`#{e.to_json}`" }.join(" or ")
    end

    if value['pattern']
      description += "<br/> **pattern:** <code>#{value['pattern'].gsub /\|/, '&#124;'}</code>"
    end

    if value['minLength'] || value['maxLength']
      description += "<br/> **Length:** `"
      if value['minLength']
        description += "#{value['minLength'].to_json}"
      end
      unless value['minLength'] == value['maxLength']
        if value['maxLength']
          unless value['minLength']
            description += "0"
          end
          description += "..#{value['maxLength'].to_json}"
        else
          description += "..âˆž"
        end
      end
      description += "`"
    end

    if value.has_key?('example')
      example = if value['example'].is_a?(Hash) && value['example'].has_key?('oneOf')
        value['example']['oneOf'].map { |e| "`#{e.to_json}`" }.join(" or ")
      else
        "`#{value['example'].to_json}`"
      end
    elsif value.has_key?('enum')
      example = "`#{schema.schema_value_example(value).to_json}`"
    elsif value['type'].include?('null')
      example = "`null`"
    end

    type = if value['type'].include?('null')
      'nullable '
    else
      ''
    end
    type += (value['format'] || (value['type'] - ['null']).first)
    [key, type, description, example, ref]
  end


  def build_link_path(schema, link)
    link['href'].gsub(%r|(\{\([^\)]+\)\})|) do |ref|
      ref = ref.gsub('%2F', '/').gsub('%23', '#').gsub(%r|[\{\(\)\}]|, '')
      ref_resource = ref.split('#/definitions/').last.split('/').first.gsub('-','_')
      identity_key, identity_value = schema.dereference(ref)
      if identity_value.has_key?('anyOf')
        '{' + ref_resource + '_' + identity_value['anyOf'].map {|r| r['$ref'].split('/').last}.join('_or_') + '}'
      else
        '{' + ref_resource + '_' + identity_key.split('/').last + '}'
      end
    end
  end

  def array_with_nested_objects?(items)
    return unless items
    items['properties'] || items['oneOf']
  end
%>
